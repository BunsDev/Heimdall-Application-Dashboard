const l="api/item",p="appload",u=({item:e,errors:t})=>{console.log(e,t);let n;t.length===0?n=`<li class="success"><i class="fas fa-circle-check"></i> Imported: ${e.title} </li>`:n=`<li class="fail"><i class="fas fa-circle-xmark"></i> Failed: ${e.title} - ${t[0]} </li>`,document.querySelector(".import-status").innerHTML+=n};function d(){const e=document.querySelector(".import-status");e.innerHTML=""}const f=(e,t)=>fetch(l,{method:"POST",cache:"no-cache",redirect:"follow",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":t},body:JSON.stringify(e)}),h=()=>{const e='input[name="_token"]';return document.querySelector(e).value},S=(e,t)=>({pinned:1,tags:[0],appid:e.appid,title:e.title,colour:e.colour,url:e.url,appdescription:e.appdescription?e.appdescription:t.description,website:t.website,icon:t.iconview,config:e.description?JSON.parse(e.description):null}),m=e=>e===null||e==="null"?Promise.resolve({}):fetch(p,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({app:e})}).then(t=>t.json()),y=e=>{e.forEach(t=>{const n=[];m(t.appid).catch(()=>n.push(new Error(`Failed to find app id: ${t.appid}`))).then(o=>{const r=S(t,o),c=h();return f(r,c)}).catch(()=>n.push(new Error(`Failed to create item: ${t.title}`))).finally(()=>{u({item:t,errors:n})})})},T=e=>new Promise((t,n)=>{try{const o=new FileReader;o.onload=r=>{const c=r.target.result;t(JSON.parse(c))},o.readAsText(e)}catch{n(new Error("Unable to read file"))}}),i=e=>(d(),T(e).catch(t=>{console.error(t)}).then(y)),s=document.querySelector("input[name='import']"),a=document.querySelectorAll(".import-button");s&&a&&(a.forEach(e=>{e.addEventListener("click",()=>{const t=s.files[0];!t||i(t)})}),s.addEventListener("change",i,!1));
